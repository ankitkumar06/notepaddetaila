// Remove all deplicate value    ⬇️⬇️


const arr = [
  {
    place: "san francisco",
    name: "jane",
  },
  {
    place: "san francisco",
    name: "jane",
  },
  {
    place: "new york",
    name: "james",
  },
];

const arr2=["hey","hey","how","how"]
const result = [...new Set(arr2)];
const result2 = [...new Set(arr.map(a => JSON.stringify(a)))].map(a => JSON.parse(a))


console.log(result2)
console.log(result)

 //setFormValues({ ...formValues,Series: [...formValues.Series,{DevicesDetails:AllGrpArr,SeriesID:newSeries._id}] });


---------------------------------------------xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx------------------------------------------------------        




  //Deep copy of formValues 

            let nRoomDetails = [...formValues.RoomDetails]
            nRoomDetails[myRoomIdx] = {...roomValues}
        
            setFormValues({...formValues,RoomDetails:nRoomDetails})
------------------------------------xxxxxx---------------------------------------

//new way deep copy
let nData = JSON.parse (JSON.stringify(data))

//adding formValues one bye one in array 
setFormValues({...formValues,RoomDetails:[...formValues.RoomDetails,nData]})

------------------------------------xxxxxx---------------------------------------

//Push value at the end:

setArray(oldArray => [...oldArray,newValue] );

//Push value at the start:

setArray(oldArray => [newValue,...oldArray] );
------------------------------------xxxxxx---------------------------------------


//CHEck box checked :true & false 


let arr = [...groupName]
        arr[ind].checked = !arr[ind].checked
        setGroupName(arr)

const checkboxes = [...checkBoxes]
        if(e.target.checked){
   checkboxes.push(value)
        }
        else{
            const index = checkboxes.findIndex((ch) => ch._id===value._id)
            checkboxes.splice(index,1)
        }
        setCheckBoxes(checkboxes)

------------------------------------xxxxxx---------------------------------------
// WHEN CLICKED ON ENTER BUTTON TO SAVE THE DATA IN FORM

const handleKeyDown = (event) => {
    if (event.key === 'Enter') {
      setUpdated(inputRef.current.value);
    }
  };

  return (
    <div>
      <input
        ref={inputRef}
        type="text"
        id="message"
        name="message"
        onKeyDown={handleKeyDown}
      />

      <h2>Updated: {updated}</h2>
    </div>
  );

------------------------------------xxxxxx---------------------------------------

//checked data is array or note

 moduleLinks: Array.isArray(entry.moduleLinks)?entry.moduleLinks.toString():entry.moduleLinks    

------------------------------ xxxxxxxxxxxxx ---------------------------------------

//edit with one state to another state

if(getParameter === "edit"){
            
                    let newArr = [...formValues.Locations]
                    newArr[editIdx] = {...inputList}
                    // setFormValues({...formValues,Locations:[{...formValues.Locations[editIdx],...inputList}]})
                    setFormValues({...formValues,Locations:newArr})
               
        }

---------------------------------------------------------------------------------------------------------------------------
// redux concept ⬇️

******************************* fileName = demoSlice.js ********************************
import { createSlice } from "@reduxjs/toolkit";

export const demoSlice = createSlice({
    name:"notes",
    initialState:{
        notes:"",
        newNotes:""
    },
    reducers:{
        saveNote:(state,action) => {
            state.notes = action.payload
        },
        saveNote2:(state,action) => {
            state.newNotes = action.payload
        }
    }
})

export const {saveNote,saveNote2} = demoSlice.actions

export default demoSlice.reducer
---------------------------------------------------------------------------------------------------------------------------------------------
******************************* fileName = demoStore.js ********************************

import { configureStore, combineReducers } from "@reduxjs/toolkit";
import demoSlice from "./demoSlice";
import persistReducer from "redux-persist/es/persistReducer";
import persistStore from "redux-persist/es/persistStore";
import sessionStorage from "redux-persist/es/storage/session";
import autoMergeLevel2 from "redux-persist/es/stateReconciler/autoMergeLevel2";
import thunk from "redux-thunk";

const rootReducer = combineReducers({
    notes:demoSlice,
    saveNote2:demoSlice
})

const rootPersistConfig = {
    key: 'root',
    storage : sessionStorage,
    stateReconciler: autoMergeLevel2
  }

  const persistedReducer = persistReducer(rootPersistConfig, rootReducer)
  
export const store = configureStore({
    reducer:persistedReducer,
    middleware:[thunk]
})

export const persistor = persistStore(store)

------------------------------------------------------------------------------------------------------------------------------------------------------------

******************************* fileName = index.js ********************************

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import { Provider } from 'react-redux';
import { store,persistor } from './redux/demoStore';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { PersistGate } from 'redux-persist/integration/react';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider store={store}>
    <PersistGate loading={null} persistor={persistor}>
    <App />
    </PersistGate>
    </Provider>
);


reportWebVitals();


------------------------------------------------------------- ⬆️ redux concept end ⬆️-------------------------------------------------------

----------------------------------  send mail from backend (start from, here)--------------------------------------------------------------------------------------

const nodemailer = require('nodemailer');

   const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: 'info.shiv223@gmail.com',
          pass: 'iypdkgdozjvghmby', //generate pass from google gmail
        },
      });
    
      const mailOptions = {
        from: 'info.shiv223@gmail.com',
        to: 'info.shiv223@gmail.com',
        subject: 'Hello from ankit',
        text: 'This is the body of the email',
      };

 transporter.sendMail(mailOptions, function(error, info) {
            if (error) {
              console.error(error);
            } else {
              console.log('Email sent: ' + info.response);
            }
          });


